package com.cweeyii.generator;

import com.google.common.base.CaseFormat;
import org.apache.commons.collections.CollectionUtils;
import org.mybatis.generator.api.FullyQualifiedTable;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.Interface;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.xml.*;
import org.mybatis.generator.config.Context;

import java.lang.reflect.Field;
import java.util.*;

public class SearchSelectivePlugin extends PageablePlugin {
	public static final String SELECT_BY_SELECTIVE = "selectBySelectiveWithPage";
	public static final String COUNT_BY_SELECTIVE = "countBySelective";
	private Map<FullyQualifiedTable, List<XmlElement>> elementsToAdd = new HashMap<FullyQualifiedTable, List<XmlElement>>();
	private Parameter parameter = null;
	private boolean hadMapperAdd = false, hadDocumentAdd = false;

	public SearchSelectivePlugin() {

	}

	public boolean validate(List<String> warnings) {
		return true;
	}

	@Override
	public boolean clientSelectByExampleWithBLOBsMethodGenerated(Method method,
	                                                             Interface interfaze, IntrospectedTable introspectedTable) {
		if (introspectedTable.getTargetRuntime() == IntrospectedTable.TargetRuntime.MYBATIS3) {
			copyAndAddMethod(method, interfaze);
		}
		return true;
	}

	@Override
	public boolean clientSelectByExampleWithoutBLOBsMethodGenerated(
			Method method, Interface interfaze,
			IntrospectedTable introspectedTable) {
		if (introspectedTable.getTargetRuntime() == IntrospectedTable.TargetRuntime.MYBATIS3) {
			copyAndAddMethod(method, interfaze);
		}
		return true;
	}

	@Override
	public boolean sqlMapSelectByExampleWithoutBLOBsElementGenerated(
			XmlElement element, IntrospectedTable introspectedTable) {
		if (introspectedTable.getTargetRuntime() == IntrospectedTable.TargetRuntime.MYBATIS3) {
			copyAndSaveElement(element, introspectedTable.getFullyQualifiedTable());
		}
		return true;
	}

	@Override
	public boolean sqlMapSelectByExampleWithBLOBsElementGenerated(
			XmlElement element, IntrospectedTable introspectedTable) {
		if (introspectedTable.getTargetRuntime() == IntrospectedTable.TargetRuntime.MYBATIS3) {
			copyAndSaveElement(element, introspectedTable.getFullyQualifiedTable());
		}
		return true;
	}

	/**
	 * We'll override this method and add any new elements generated by
	 * previous calls
	 */
	@Override
	public boolean sqlMapDocumentGenerated(Document document,
	                                       IntrospectedTable introspectedTable) {
		List<XmlElement> elements = elementsToAdd.get(introspectedTable.getFullyQualifiedTable());
		if (elements != null) {
			for (XmlElement element : elements) {
				document.getRootElement().addElement(element);
			}
		}

		return true;
	}

	private void copyAndAddMethod(Method method, Interface interfaze) {
		getParameter(interfaze);
		checkParameter();

		if (! hadMapperAdd) {
			Method countMethod = new Method(method);
			countMethod.setName(COUNT_BY_SELECTIVE);
			countMethod.getParameters().clear();
			countMethod.addParameter(new Parameter(parameter.getType(), parameter.getName(), "@Param(\"record\")"));
			countMethod.setReturnType(new FullyQualifiedJavaType(int.class.getName()));
			interfaze.addMethod(countMethod);

			Method selectMethod = new Method(method);
			selectMethod.setName(SELECT_BY_SELECTIVE);
			selectMethod.getParameters().clear();
			selectMethod.addParameter(new Parameter(parameter.getType(), parameter.getName(), "@Param(\"record\")"));
			selectMethod.addParameter(createPageParameter());
			interfaze.addMethod(selectMethod);
			interfaze.addImportedType(pageClass);
			hadMapperAdd = true;
		}
	}

	private void getParameter(Interface interfaze) {
		for (Method existMethod : interfaze.getMethods()) {
			if (existMethod.getName().contains("Selective")) {
				parameter = existMethod.getParameters().get(0);
				break;
			}
		}
	}

	private void copyAndSaveElement(XmlElement rootElement, FullyQualifiedTable fqt) {
		if (! hadDocumentAdd) {
			try {
				checkParameter();

				// save the new rootElement locally.   We'll add it to the document
				// later
				List<XmlElement> elements = elementsToAdd.get(fqt);
				if (elements == null) {
					elements = new ArrayList<XmlElement>();
					elementsToAdd.put(fqt, elements);
				}
				elements.add(createSelectElement(rootElement));
				elements.add(createCountElement(rootElement));
			} catch (Exception e) {
				throw new RuntimeException(e);
			}
			hadDocumentAdd = true;
		}
	}

	private XmlElement createSelectElement(XmlElement rootElement) throws NoSuchFieldException, IllegalAccessException {
		XmlElement newElement = new XmlElement(rootElement);
		changeSelectElementId(newElement);
		removeType(newElement);
		removeImport(newElement);

		Field field = Context.class.getDeclaredField("introspectedTables");
		field.setAccessible(true);
		List<IntrospectedTable> introspectedTables = (List<IntrospectedTable>) field.get(super.getContext());
		boolean haveMatch = false;
		for (IntrospectedTable introspectedTable : introspectedTables) {
			String tableName = introspectedTable.getFullyQualifiedTable().getIntrospectedTableName();
			if (CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, tableName).equals(parameter.getType().getShortName())) {
				haveMatch = true;
				String alias = setAlias(newElement);
				if (CollectionUtils.isNotEmpty(introspectedTable.getAllColumns())) {
					appendSelective(newElement, introspectedTable, alias);
					appendLimit(newElement);
				}
			}
		}
		if (! haveMatch) {
			throw new RuntimeException("没有匹配的domain");
		}
		return newElement;
	}

	private XmlElement createCountElement(XmlElement rootElement) throws NoSuchFieldException, IllegalAccessException {
		XmlElement newElement = new XmlElement(rootElement);
		changeCountElementId(newElement);
		changeResultType(newElement);
		removeType(newElement);
		removeImport(newElement);
		removeInclude(newElement);

		Field field = Context.class.getDeclaredField("introspectedTables");
		field.setAccessible(true);
		List<IntrospectedTable> introspectedTables = (List<IntrospectedTable>) field.get(super.getContext());
		boolean haveMatch = false;
		for (IntrospectedTable introspectedTable : introspectedTables) {
			String tableName = introspectedTable.getFullyQualifiedTable().getIntrospectedTableName();
			if (CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, tableName).equals(parameter.getType().getShortName())) {
				haveMatch = true;
				String alias = setAlias(newElement);
				appendSelectElement(newElement, introspectedTable);

				if (CollectionUtils.isNotEmpty(introspectedTable.getAllColumns())) {
					appendSelective(newElement, introspectedTable, alias);
				}
			}
		}
		if (! haveMatch) {
			throw new RuntimeException("没有匹配的domain");
		}
		return newElement;
	}

	public String setAlias(XmlElement xmlElement) {
		int i = 0;
		String fromContent = null;
		for (Iterator<Element> iterator = xmlElement.getElements().iterator(); iterator.hasNext(); ++ i) {
			Element next = iterator.next();
			if (next instanceof TextElement) {
				TextElement fromElement = (TextElement) next;
				if (fromElement.getContent().contains("from ")) {
					iterator.remove();
					fromContent = fromElement.getContent();
					break;
				}
			}
		}
		if (fromContent == null) {
			throw new RuntimeException("找不到from节点!");
		}
		String alias = parameter.getType().getShortName().substring(0, 1).toLowerCase();
		xmlElement.addElement(i, new TextElement(fromContent + " " + alias));
		return alias;
	}

	private void appendSelectElement(XmlElement newElement, IntrospectedTable introspectedTable) {
		int selectIndex = 0;
		for (int i = 0; i < newElement.getElements().size(); i++) {
			if (newElement.getElements().get(i) instanceof TextElement) {
				TextElement selectElement = (TextElement) newElement.getElements().get(i);
				if (selectElement.getContent().contains("select")) {
					selectIndex = i + 1;
					break;
				}
			}
		}
		TextElement selectElement = null;
		if (introspectedTable.getPrimaryKeyColumns().size() == 1) {
			selectElement = new TextElement("count(" + introspectedTable.getPrimaryKeyColumns().get(0).getActualColumnName() + ")");
		} else {
			selectElement = new TextElement("count(*)");
		}
		newElement.addElement(selectIndex, selectElement);
	}

	private void appendSelective(XmlElement newElement, IntrospectedTable introspectedTable, String alias) {
		newElement.addElement(new TextElement("where"));
		for (IntrospectedColumn column : introspectedTable.getAllColumns()) {
			XmlElement conditionElement = new XmlElement("if");
			conditionElement.addAttribute(new Attribute("test", "record." + column.getJavaProperty() + " != null"));
			conditionElement.addElement(new TextElement(alias + "." + column.getActualColumnName() + "=#{record." + column.getJavaProperty() + "} and"));
			newElement.addElement(conditionElement);
		}
		newElement.addElement(new TextElement("1=1"));
	}

	private void removeInclude(XmlElement newElement) {
		for (Iterator<Element> iterator = newElement.getElements().iterator(); iterator.hasNext(); ) {
			Element element = iterator.next();
			if (element instanceof XmlElement) {
				XmlElement next = (XmlElement) element;
				if ("include".equals(next.getName())) {
					iterator.remove();
					break;
				}
			}
		}
	}

	private void changeResultType(XmlElement newElement) {
		for (Iterator<Attribute> iterator = newElement.getAttributes().iterator(); iterator.hasNext(); ) {
			Attribute attribute = iterator.next();
			if ("resultMap".equals(attribute.getName())) {
				iterator.remove();
				newElement.addAttribute(new Attribute("resultType", Integer.class.getName()));
				break;
			}
		}
	}

	private void changeCountElementType(XmlElement newElement) {
		for (Iterator<Attribute> iterator = newElement.getAttributes().iterator(); iterator.hasNext(); ) {
			Attribute attribute = iterator.next();
			if ("parameterType".equals(attribute.getName())) {
				iterator.remove();
				Attribute paramTypeAttribute = new Attribute("parameterType", parameter.getType().toString());
				newElement.addAttribute(paramTypeAttribute);
				break;
			}
		}
	}

	private void changeCountElementId(XmlElement newElement) {
		for (Iterator<Attribute> iterator = newElement.getAttributes().iterator(); iterator.hasNext(); ) {
			Attribute attribute = iterator.next();
			if ("id".equals(attribute.getName())) {
				iterator.remove();
				Attribute idAttribute = new Attribute("id", COUNT_BY_SELECTIVE);
				newElement.addAttribute(idAttribute);
				break;
			}
		}
	}

	private void removeImport(XmlElement newElement) {
		for (int i = 0; i < 3; i++) {
			for (Iterator<Element> iterator = newElement.getElements().iterator(); iterator.hasNext(); ) {
				Element element = iterator.next();
				if (element instanceof XmlElement) {
					XmlElement next = (XmlElement) element;
					if ("if".equals(next.getName())) {
						iterator.remove();
						break;
					}
				}
			}
		}
	}

	private void changeSelectElementType(XmlElement newElement) {
		for (Iterator<Attribute> iterator = newElement.getAttributes().iterator(); iterator.hasNext(); ) {
			Attribute attribute = iterator.next();
			if ("parameterType".equals(attribute.getName())) {
				iterator.remove();
				Attribute paramTypeAttribute = new Attribute("parameterType", parameter.getType().toString());
				newElement.addAttribute(paramTypeAttribute);
				newElement.addAttribute(new Attribute("parameterType", pageClass.toString()));
				break;
			}
		}
	}

	private void changeSelectElementId(XmlElement newElement) {
		for (Iterator<Attribute> iterator = newElement.getAttributes().iterator(); iterator.hasNext(); ) {
			Attribute attribute = iterator.next();
			if ("id".equals(attribute.getName())) {
				iterator.remove();
				Attribute idAttribute = new Attribute("id", SELECT_BY_SELECTIVE);
				newElement.addAttribute(idAttribute);
				break;
			}
		}
	}

	private void checkParameter() {
		if (parameter == null) {
			throw new NullPointerException("找不到Selective相关的方法");
		}
	}
}
